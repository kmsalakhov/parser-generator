PLUS: [\+];
MUL: [\*];
NUM: [\d+];
OPEN: [\(];
CLOSE: [\)];
C: [C];
COMMA: [,];

exp {} {$int $value};

exp: term{}
     exp1{}
     @out.value = term_res_1.value + exp1_res_2.value;@;


exp1 {} {$int $value};

exp1: PLUS
      term{}
      exp1{}
      @out.value = term_res_1.value + exp1_res_2.value;@;

exp1: DEFAULT
      @out.value = 0;@;


term {} {$int $value};

term: fact{}
      term1{}
      @out.value = fact_res_1.value * term1_res_2.value;@;


term1 {} {$int $value};

term1: MUL
       fact{}
       term1{}
       @out.value = fact_res_1.value * term1_res_2.value;@;

term1: DEFAULT
       @out.value = 1;@;


fact {} {$int $value};

fact: OPEN
      exp{}
      CLOSE
      @out.value = exp_res_1.value;@;

fact: C
      OPEN
      exp{}
      COMMA
      exp{}
      CLOSE
      @
          int n = exp_res_1.value;
          int m = exp_res_2.value;
          int n_fact = 1;
          for (int i = 1; i <= n; ++i) {
              n_fact *= i;
          }
          int m_fact = 1;
          for (int i = 1; i <= m; ++i) {
              m_fact *= i;
          }
          int mn_fact = 1;
          for (int i = 1; i <= n - m; ++i) {
              mn_fact *= i;
          }
          out.value = n_fact / m_fact / mn_fact;
      @;

fact: @int token_value = Integer.parseInt(lexer.getToken().getText());@
      NUM
      @out.value = token_value;@;
